network:
  # schema is the HTTP schema
  # setting to `https` does not enable https, it only changes the way URLs are generated
  schema: http
  # host is the hostname or IP address
  # if the host name contains a `.local` suffix, the name will be announced on MDNS
  # docker: MDNS announcements don't work. host must be set to the docker host's name.
  host: {{server}}
  # port is the listening port for UI and api
  # evcc will listen on all available interfaces
  port: 7070

interval: 30s # control cycle interval

# database configuration for persisting charge sessions and settings
# database:
#   type: sqlite
#   dsn: <path-to-db-file>

# sponsor token enables optional features (request at https://sponsor.evcc.io)
# sponsortoken:

# telemetry enables aggregated statistics
#
# Telemetry allows collecting usage data (grid and green energy, charge power).
# Data is aggregated, no individual charging sessions are tracked. The collected,
# anonymous data can be retrieved using https://api.evcc.io.
#
# See https://github.com/evcc-io/evcc/pull/4343 or details.
#
# For time being, this is only available to sponsors, hence data is associated with
# the sponsor token's identity.
#
# telemetry: true

# log settings
log: info
levels:
  site: debug
  lp-1: debug
  lp-2: debug
  cache: error
  db: error

# modbus proxy for allowing external programs to reuse the evcc modbus connection
# each entry will start a proxy instance at the given port speaking Modbus TCP and
# relaying to the given modbus downstream device (either TCP or RTU, RS485 or TCP)
modbusproxy:
  #  - port: 5200
  #    uri: solar-edge:502
  #    # rtu: true
  #    # readonly: true

# meter definitions
# name can be freely chosen and is used as reference when assigning meters to site and loadpoints
# for documentation see https://docs.evcc.io/docs/devices/meters    
meters:
  - name: grid1
    type: custom
    power:
      source: calc
      add:
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.geleverd_vermogen
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: 1000
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.retour_vermogen
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: -1000
    energy:
      source: calc
      add:
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.electriciteitsverbruik_piek
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.electriciteitsverbruik_dal
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
    currents:
    - source: http
      uri: http://{{server}}:8123/api/states/sensor.stroom_fase1
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
    - source: http
      uri: http://{{server}}:8123/api/states/sensor.stroom_fase2
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
    - source: http
      uri: http://{{server}}:8123/api/states/sensor.stroom_fase3
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
    powers:
    - source: calc
      add:
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.geleverd_vermogen_fase1
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: 1000
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.retour_vermogen_fase1
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: -1000
    - source: calc
      add:
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.geleverd_vermogen_fase2
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: 1000
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.retour_vermogen_fase2
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: -1000
    - source: calc
      add:
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.geleverd_vermogen_fase3
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: 1000
      - source: http
        uri: http://{{server}}:8123/api/states/sensor.retour_vermogen_fase3
        method: GET
        headers:
        - content-type: application/json
        auth:
          type: bearer
          password: {{your token}} 
        jq: .state
        scale: -1000
  - name: pv1
    type: custom
    power:
      source: http
      uri: http://{{server}}:8123/api/states/sensor.hoymiles_pv_pv_power
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
      scale: 1000
    energy:
      source: http
      uri: http://{{server}}:8123/api/states/sensor.hoymiles_pv_total_production
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state |  if . == "unknown" then 0 else . end
      scale: 1000

        
# charger definitions
# name can be freely chosen and is used as reference when assigning charger to vehicle
# for documentation see https://docs.evcc.io/docs/devices/chargers
chargers:
#  - name: charger1
#    type: wallbe # Wallbe charger
#    uri: 192.168.0.8:502 # ModBus address 
  - name: charger1
    type: custom
    status: # charger status A..F
      source: http
      uri: http://{{server}}:8123/api/states/sensor.control_pilot_state
      method: GET
      headers:
      - content-type: application/json
      auth:
       type: bearer
       password: {{your token}} 
      jq: .state | match("[A-F]$"; "g").string
    
    enabled: # charger enabled state (true/false or 0/1)
      source: http
      uri: http://{{server}}:8123/api/states/sensor.total_power
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state | tonumber |  if . > 10 then true else false end
    
    enable: # set charger enabled state (true/false or 0/1)
      source: http
      uri: http://{{server}}:8123/api/services/input_boolean/{{if .enable}}turn_on{{else}}turn_off{{end}}
      method: POST
      body: '{"entity_id": "input_boolean.ev_charging"}'
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state

    maxcurrent: # set charger max current (A)
      source: http
      uri: http://{{server}}:8123/api/services/input_number/set_value
      method: POST
      body: '{"entity_id": "input_number.charge_current_limit", "value": "{{ (mul .maxcurrent 1000) }}"}' ## maxcurrent seems not to be called, tested with webhook.site. should delivered an integer
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
      scale: 0.001

    maxcurrentmillis: # set charger max current (mA), maxcurrent: MUST be defined too!
      source: http
      uri: http://{{server}}:8123/api/services/input_number/set_value
      method: POST
      body: '{"entity_id": "input_number.charge_current_limit", "value": "{{ (mul .maxcurrentmillis 1000) | int}}"}' ## maxcurrentmillis is given the current in amperes as a float
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
      scale: 0.001

    Phases1p3p: # phase switching (1/3)
      source: http
      uri: http://{{server}}:8123/api/services/input_boolean/{{if (1 | eq .phases)}}turn_on{{else}}turn_off{{end}}
      method: POST
      body: '{"entity_id": "input_boolean.force_1phase"}'
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state

    tos: true
# #     features:
# #       # no vehicle
# #       - integrateddevice
# #       # SoC as temperature
# #       - heating
# #     icon: ...

# vehicle definitions
# name can be freely chosen and is used as reference when assigning vehicle to loadpoint
# for documentation see https://docs.evcc.io/docs/devices/vehicles
vehicles:
  # - name: car1 ## disabled because too many requests to Renault backend
    # type: template
    # template: renault
    # title: Renault Scenic e-Tech
    # user: ""
    # password: ""
    # #vin: WREN... # Required if you own multiple vehicles of the same brand (optional)
    # capacity: 87 # Battery capacity in kWh (optional)
  - name: car1
    type: custom
    title: Renault Scenic e-Tech # display name for UI
    capacity: 87 # battery capacity (kWh)
    soc: # battery soc (%)
      source: http
      uri: http://{{server}}:8123/api/states/sensor.gns05l_batterij
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
#    status: # optional charge status (A..F)
#      source: # plugin type
#      # ...
    range: # optional electric range (km)
      source: http
      uri: http://{{server}}:8123/api/states/sensor.gns05l_battery_autonomy
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
    odometer: # optional odometer (km)
      source: http
      uri: http://{{server}}:8123/api/states/sensor.gns05l_kilometerstand
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state
    climater: # optional climate status (true/false)
      source: http
      uri: http://{{server}}:8123/api/states/binary_sensor.gns05l_hvac
      method: GET
      headers:
      - content-type: application/json
      auth:
        type: bearer
        password: {{your token}} 
      jq: .state | if . == "on" then true else false end
# #    wakeup: # optional vehicle wake up command
# #      source: # plugin type
# #      # ...
# #    maxcurrent: # set charger max current (A)
# #      source: # plugin type
# #      # ...
# #    limitsoc: # optional in-vehicle limit soc, read-only (%)
# #      source: # plugin type
# #      # ...


# site describes the EVU connection, PV and home battery
site:
  title: Home # display name for UI
  meters:
    grid: grid1 # grid meter
    pv: pv1
      #- pv # list of pv inverters/ meters
    battery:
      #- battery # list of battery meters
    aux:
      #- aux # list of auxiliary meters for adjusting grid operating point
  residualPower: 0 # additional household usage margin
  #prioritySoc: 0 # give home battery priority up to this soc (empty to disable)
  #bufferSoc: 0 # continue charging on battery above soc (0 to disable)
  #bufferStartSoc: 0 # start charging on battery above soc (0 to disable)
  maxGridSupplyWhileBatteryCharging: 0 # ignore battery charging if AC consumption is above this value
  #smartCostLimit: 0 # set cost limit for automatic charging in PV mode

# load management
circuits:
  - name: main # if there is only one circuit defined the name needs to be 'main'
    title: 'main circuit' # name for the UI (not implemented in UI yet)
    maxCurrent: 25 # 63A (optional)
    maxPower: 17250 # 30kW (optional)
    meter: grid1 # optional
    
# loadpoint describes the charger, charge meter and connected vehicle
loadpoints:
  - title: Garage # display name for UI
    circuit: main
    charger: charger1 # charger
    #meter: charge # charge meter
    mode: "pv" # alleen bij zonneenergie, of wanneer prijs onder ingesteld level //set default charge mode, use "off" to disable by default if charger is publicly available
    vehicle: car1 # set default vehicle (disables vehicle detection)
    #resetOnDisconnect: true # set defaults when vehicle disconnects
    phases: 0 # electrical connection (normal charger: default 3 for 3 phase, 1p3p charger: 0 for "auto" or 1/3 for fixed phases)
    #minCurrent: 6 # depreciated #minimum charge current (default 6A)
    #maxcurrent: 25 # depreciated #maximum charge current (default 16A)
    #maxPower: 15000 # 30kW (optional)

    # remaining settings are experts-only and best left at default values
    priority: 0 # relative priority for concurrent charging in PV mode with multiple loadpoints (higher values have higher priority)
    soc:
      # polling defines usage of the vehicle APIs
      # Modifying the default settings it NOT recommended. It MAY deplete your vehicle's battery
      # or lead to vehicle manufacturer banning you from API use. USE AT YOUR OWN RISK.
      poll:
        # poll mode defines under which condition the vehicle API is called:
        #   charging: update vehicle ONLY when charging (this is the recommended default)
        #   connected: update vehicle when connected (not only charging), interval defines how often
        #   always: always update vehicle regardless of connection state, interval defines how often (only supported for single vehicle)
        mode: charging
        # poll interval defines how often the vehicle API may be polled if NOT charging
        interval: 60m
      estimate: true # set false to disable interpolating between api updates (not recommended)
    enable: # pv mode enable behavior
      delay: 1m # threshold must be exceeded for this long
      threshold: 0 # grid power threshold (in Watts, negative=export). If zero, export must exceed minimum charge power to enable
    disable: # pv mode disable behavior
      delay: 3m # threshold must be exceeded for this long
      threshold: 0 # maximum import power (W)
    guardDuration: 5m # switch charger contactor not more often than this (default 5m)

# tariffs are the fixed or variable tariffs
tariffs:
  currency: EUR # three letter ISO-4217 currency code (default EUR)
  grid:
    # either static grid price (or price zones)
    #type: fixed
    #price: 0.40 # EUR/kWh
    #zones:
    #  - days: Mon-Fri
    #    hours: 2-5
    #    price: 0.40 # EUR/kWh
    #  - days: Sat,Sun
    #    price: 0.40 # EUR/kWh

    # or variable tariffs
    type: entsoe # Entso-E european market data
    domain: LFA|NL  ##BZN|DE-LU # https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html#_areas
    securitytoken: "" # api token
    charges: 0.12799 # optional, additional charges per kWh, "Tibber": 0.0020 + energie_belasting": 0.12599
    tax: 0.21 # optional, additional tax (0.1 for 10%)
    
    #type: tibber
    #token: "" # access token
    # homeid: "" # optional if multiple homes associated to account

    # type: awattar
    # region: de # optional, choose at for Austria
    # charges: # optional, additional charges per kWh
    # tax: # optional, additional tax (0.1 for 10%)

    # type: octopusenergy
    # tariff: AGILE-FLEX-22-11-25 # Tariff code
    # region: A # optional

    # type: elering # Nordpool
    # region: ee # or lt, lv, fi
    # charges: # optional, additional charges per kWh
    # tax: # optional, additional tax (0.1 for 10%)

    # type: energinet # Energinet using the price in DKK
    # region: dk1 # or dk2
    # charges: # optional, additional charges per kWh
    # tax: # optional, additional tax (0.1 for 10%)
  feedin:
    # rate for feeding excess (pv) energy to the grid
    #type: fixed
    #price: 0.40 # EUR/kWh
    
    type: entsoe # Entso-E european market data
    domain: LFA|NL  ##BZN|DE-LU # https://transparency.entsoe.eu/content/static_content/Static%20content/web%20api/Guide.html#_areas
    securitytoken: {{your apitoken}} # api token
    charges: 0.12799 # optional, additional charges per kWh, "Tibber": 0.0020 + energie_belasting": 0.12599
    tax: 0.21 # optional, additional tax (0.1 for 10%)

    # type: octopusenergy
    # tariff: AGILE-FLEX-22-11-25 # Tariff code
    # region: A # optional
  co2:
    # co2 tariff provides co2 intensity forecast and is for co2-optimized target charging if no variable grid tariff is specified
    # type: grünstromindex # GrünStromIndex (Germany only)
    # zip: <zip>

    # type: electricitymaps # https://app.electricitymaps.com/map
    # uri: <uri>
    # token: <token>
    # zone: DE

    # type: ngeso # National Grid Electricity System Operator data (United Kingdom only) https://carbonintensity.org.uk/
    # provides national data if both region and postcode are omitted - do not supply both at the same time!
    # region: 1 # optional, coarser than using a postcode - see https://api.carbonintensity.org.uk/ for full list
    # postcode: SW1A1AA # optional

# mqtt message broker
#mqtt:
#  broker: localhost:1883
#  topic: evcc # root topic for publishing, set empty to disable
#  user: mqtt
#  password: 


# influx database
influx:
  # url: http://localhost:8086
  # database: evcc
  # user: 
  # password: 

# eebus credentials
eebus:
  # uri: # :4712
  # interfaces: # limit eebus to specific network interfaces
  # - en0
  # certificate: # local signed certificate, required, can be generated via `evcc eebus-cert`
  #   public: # public key
  #   private: # private key

# push messages
messaging:
  events:
    start: # charge start event
      title: Charge started
      msg: Started charging in "${mode}" mode
    stop: # charge stop event
      title: Charge finished
      msg: Finished charging ${chargedEnergy:%.1fk}kWh in ${chargeDuration}.
    connect: # vehicle connect event
      title: Car connected
      msg: "Car connected at ${pvPower:%.1fk}kW PV"
    disconnect: # vehicle connected event
      title: Car disconnected
      msg: Car disconnected after ${connectedDuration}
    soc: # vehicle soc update event
      title: Soc updated
      msg: Battery charged to ${vehicleSoc:%.0f}%
    guest: # vehicle could not be identified
      title: Unknown vehicle
      msg: Unknown vehicle, guest connected?
  services:
  # - type: pushover
  #   app: # app id
  #   recipients:
  #   - # list of recipient ids
  # - type: telegram
  #   token: # bot id
  #   chats:
  #   - # list of chat ids
  # - type: email
  #   uri: smtp://<user>:<password>@<host>:<port>/?fromAddress=<from>&toAddresses=<to>
  # - type: ntfy
  #   uri: https://<host>/<topics>
  #   priority: <priority>
  #   tags: <tags>
